/* eslint-env node */
/* eslint-disable no-console */
// NOTE: This file is run pre build and creates `app.components.js`.
const chalk = require('chalk');
const fs = require('fs');
const kebabToPascal = require('@creuna/utils/kebab-to-pascal').default;
const klaw = require('klaw');
const path = require('path');
const prettier = require('prettier');

const prettierConfig = require('./prettier-config');
const componentDirectory = path.join(__dirname, '..', 'source', 'components');

const disclaimers = [
  '// NOTE: Do not edit this file. It is built by running `./build/create-app-components.js`',
  '// NOTE: The imported/exported components are exposed to the global scope',
  `// NOTE: Generated at ${new Date().toISOString()}`
];

const fileName = 'app.components.js';

console.log(`⚙️  Generating ${chalk.blueBright(fileName)}`);

const components = {};

const filter = item => {
  const basename = path.basename(item);
  return basename === '.' || basename[0] !== '.';
};

klaw(componentDirectory, { filter })
  .on('readable', function() {
    let item;
    while ((item = this.read())) {
      const slugs = item.path.split(path.sep);
      const indexFile = `${slugs
        .filter((item, index) => {
          return index !== slugs.length - 1;
        })
        .join(path.sep)}${path.sep}index.js`;
      const fileName = slugs[slugs.length - 1].replace('.jsx', '');
      const folderName = slugs[slugs.length - 2];

      if (fileName === folderName && fs.existsSync(indexFile)) {
        const componentName =
          folderName[0] === folderName[0].toUpperCase()
            ? folderName
            : kebabToPascal(slugs[slugs.length - 2]);

        components[componentName] = `./components${item.path
          .replace(componentDirectory, '')
          .replace(`${path.sep}${slugs[slugs.length - 1]}`, '')}`;
      }
    }
  })
  .on('error', (err, item) => {
    console.log(
      `👻  ${chalk.red('Error walking directory on item:')} ${chalk.blueBright(
        item
      )}`,
      err
    );
    throw err;
  })
  .on('end', () => {
    const componentNames = Object.keys(components);

    const importStatements = componentNames.reduce(
      (accumulator, componentName) => {
        accumulator += `import ${componentName} from '${
          components[componentName]
        }';\n`;
        return accumulator;
      },
      ''
    );

    const returnObjectContents = componentNames.reduce(
      (accumulator, componentName, currentIndex) => {
        const separator = currentIndex < componentNames.length - 1 ? ',' : '';
        accumulator += `  ${componentName}${separator}\n`;
        return accumulator;
      },
      ''
    );

    const exportStatement = `export {\n${returnObjectContents}};`;

    const fileContent = `${disclaimers.join('\n')}\n${importStatements.replace(
      /\\/g,
      '/'
    )}\n${exportStatement}\n`;

    fs.writeFile(
      path.join(__dirname, '..', 'source', fileName),
      prettier.format(fileContent, prettierConfig),
      {},
      err => {
        if (!err) {
          console.log(`💾  ${chalk.blueBright(fileName)} saved`);
        } else {
          console.log(
            `👻  ${chalk.red('Error writing')} ${chalk.blueBright(fileName)}`,
            err
          );
        }
      }
    );
  });
