/* eslint-env node */
/* eslint-disable no-console */
// NOTE: This file is run pre build and creates `app.components.js`.
const chalk = require('chalk');
const klawSync = require('klaw-sync');
const path = require('path');

const getComponentMetadata = require('./get-component-metadata');
const handleKlawError = require('./handle-klaw-error');
const writeFile = require('./write-file');

const disclaimers = [
  '// NOTE: Do not edit this file. It is built by running `./scripts/create-app-components.js`',
  '// NOTE: The imported/exported components are exposed to the global scope'
].join('\n');

const componentDirectory = path.join(__dirname, '..', 'source', 'components');
const outputPath = path.resolve(__dirname, '..', 'source');
const fileName = 'app.components.js';

console.log(`⚙️  Generating ${chalk.blueBright(fileName)}`);

try {
  const components = klawSync(componentDirectory, {
    filter: item => path.basename(item.path)[0] !== '.'
  }).reduce((accumulator, { path: filePath }) => {
    const { componentName } = getComponentMetadata(filePath);

    if (!componentName) return accumulator;

    return {
      ...accumulator,
      [componentName]: `./${path.relative(outputPath, path.dirname(filePath))}`
    };
  }, {});

  const importStatements = Object.entries(components).reduce(
    (accumulator, [name, path]) =>
      accumulator + `import ${name} from '${path.replace(/\\/g, '/')}';\n`,
    ''
  );

  const exportProperties = Object.keys(components).join(',\n  ');
  const exportStatement = `export {\n  ${exportProperties}\n}`;

  const fileContent = `${disclaimers}\n\n${importStatements}\n${exportStatement}\n`;

  writeFile(path.join(outputPath, fileName), fileContent);
} catch (error) {
  handleKlawError(error, componentDirectory);
}
